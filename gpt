#include <stdbool.h>
#include <time.h>
#include <json-c/json.h>
#include <json-c/json_object.h>
#include "lib/mongoose.h"

...

bool send_widget_scoreboard(widget_scoreboard w) {
	if (client_con == NULL) {
		fprintf(stderr, "Client not connected, couldn't send widget!\n");
		return false;
	}

	strcpy(w.team2, "Amogus Inc."); // TODO
	const char *data = (char *) &w;
	printf("TODO about to send data (as struct): '%d/%s/%s/%d/%d/%d'\n", w.widget_num, w.team1, w.team2, w.score_t1, w.score_t2, w.is_halftime);
	printf("TODO about to send data (as string): '%s'\n", data);
	printf("sizeof(widget_scoreboard): %d\n", sizeof(widget_scoreboard));

	const size_t sent_bytes = mg_ws_send(client_con, data, sizeof(widget_scoreboard), WEBSOCKET_OP_BINARY);
	printf("TODO we just sent %lu bytes!\n", sent_bytes);
	printf("sent scoreboard data to %d, enabled value: %d\n", w.widget_num - WIDGET_SCOREBOARD, client_con);
	return true;
}

...

int main(void) {
	// WebSocket stuff
	struct mg_mgr mgr;
	mg_mgr_init(&mgr);
	mg_http_listen(&mgr, URL, ev_handler, NULL);

	// User data stuff
	load_json(JSON_PATH);
	init_matchday();

	bool close = false;
	while (!close) {
		char c = getchar();
		switch (c) {
		case SET_TIME: {
			u16 min; u8 sec;
			printf("Current time: %d:%2d\nNew time (in MM:SS): ", md.cur.time/60, md.cur.time%60);
			scanf("%hu:%hhu", &min, &sec); // TODO fix this, %ud breaks sec input
			md.cur.time = min*60 + sec;
			printf("New current time: %d:%2d\n", md.cur.time/60, md.cur.time%60);
			break;
		}
		case ADD_SECOND:
			md.cur.time++;
			printf("Added 1s, new time: %d:%d\n", md.cur.time/60, md.cur.time%60);
			break;
		case REMOVE_SECOND:
			md.cur.time--;
			printf("Removed 1s, new time: %d:%d\n", md.cur.time/60, md.cur.time%60);
			break;
		case GAME_FORWARD:
			if (md.cur.gameindex == md.games_count - 1) {
				printf("Already at last game! Doing nothing ...\n");
				break;
			}
			md.cur.gameindex++;
			md.cur.halftime = 0;
			md.cur.time = GAME_LENGTH;
			printf(
				"New Game %d: %s vs. %s\n",
				md.cur.gameindex + 1,
				md.teams[md.games[md.cur.gameindex].t1_index].name,
				md.teams[md.games[md.cur.gameindex].t2_index].name
			);
			break;
		case GAME_BACK:
			if (md.cur.gameindex == 0) {
				printf("Already at first  ame! Doing nothing ...\n");
				break;
			}
			md.cur.gameindex--;
			md.cur.halftime = 0;
			md.cur.time = GAME_LENGTH;
			printf(
				"New Game %d: %s vs. %s\n",
				md.cur.gameindex+1,
				md.teams[md.games[md.cur.gameindex].t1_index].name,
				md.teams[md.games[md.cur.gameindex].t2_index].name
			);
			break;
		case GOAL_TEAM_1:
			md.games[md.cur.gameindex].score.t1++;
			printf(
				"New Score: %d : %d\n",
				md.games[md.cur.gameindex].score.t1,
				md.games[md.cur.gameindex].score.t2
			);
			break;
		case GOAL_TEAM_2:
			md.games[md.cur.gameindex].score.t2++;
			printf(
				"New Score: %d : %d\n",
				md.games[md.cur.gameindex].score.t1,
				md.games[md.cur.gameindex].score.t2
			);
			break;
		case REMOVE_GOAL_TEAM_1:
			if (md.games[md.cur.gameindex].score.t1 > 0)
				--md.games[md.cur.gameindex].score.t1;
			printf(
				"New Score: %d : %d\n",
				md.games[md.cur.gameindex].score.t1,
				md.games[md.cur.gameindex].score.t2
			);
			break;
		case REMOVE_GOAL_TEAM_2:
			if (md.games[md.cur.gameindex].score.t2 > 0)
				--md.games[md.cur.gameindex].score.t2;
			printf(
				"New Score: %d : %d\n",
				md.games[md.cur.gameindex].score.t1,
				md.games[md.cur.gameindex].score.t2
			);
			break;
		case YELLOW_CARD:
			add_card(0);
			break;
		case RED_CARD:
			add_card(1);
			break;
		case DELETE_CARD: {
			u32 cur_i = md.cur.gameindex;
			for (u32 i = 0; i < md.games[cur_i].cards_count; i++) {
				printf("%d. ", i + 1);
				if (md.games[cur_i].cards[i].card_type == 0)
					printf("Y ");
				else
					printf("R ");
				printf("%s , %s ", md.players[md.games[cur_i].cards[i].player_index].name,
										  md.teams[md.players[md.games[cur_i].cards[i].player_index].team_index].name);
				if (md.players[md.games[cur_i].cards[i].player_index].role == 0)
					printf("(Keeper)\n");
				else
					printf("(field)\n");
			}
			printf("Select a card to delete: ");
			u32 c = 0;
			scanf("%ud", &c);
			// Overwrite c with the last element
			md.games[cur_i].cards[c-1] = md.games[cur_i].cards[--md.games[cur_i].cards_count];
			printf("Cards remaining:\n");
			for (u32 i = 0; i < md.games[cur_i].cards_count; i++) {
				printf("%d. ", i + 1);
				if (md.games[cur_i].cards[i].card_type == 0)
					printf("Y ");
				else
					printf("R ");
				printf("%s , %s ", md.players[md.games[cur_i].cards[i].player_index].name,
										  md.teams[md.players[md.games[cur_i].cards[i].player_index].team_index].name);
				if (md.players[md.games[cur_i].cards[i].player_index].role == 0)
					printf("(Keeper)\n");
				else
					printf("(field)\n");
			}
			break;
		}
		// #### UI STUFF
		case TOGGLE_WIDGET_SCOREBOARD:
			widget_scoreboard_enabled = !widget_scoreboard_enabled;
			send_widget_scoreboard(widget_scoreboard_create());
			break;
		/*
		case TOGGLE_WIDGET_HALFTIME:
			widget_halftime_enabled = !widget_halftime_enabled;
			send_widget_halftime(widget_halftime_create());
			break;
		*/
		case TOGGLE_WIDGET_LIVETABLE:
			widget_livetable_enabled = !widget_livetable_enabled;
			send_widget_livetable(widget_livetable_create());
			break;
		case TOGGLE_WIDGET_GAMEPLAN:
			widget_gameplan_enabled = !widget_gameplan_enabled;
			send_widget_gameplan(widget_gameplan_create());
			break;
		case TOGGLE_WIDGET_SPIELSTART:
			widget_spielstart_enabled = !widget_spielstart_enabled;
			send_widget_spielstart(widget_spielstart_create());
			break;
		// #### Debug Stuff
		case EXIT:
			close = true;
			break;
		case RELOAD_JSON:
			printf("TODO: RELOAD_JSON\n");
			break;
		case PRINT_HELP:
			printf("TODO: PRINT_HELP\n");
			break;
		// #### ORIESNTIOERASNTEOI
		case TEST: {
			char string[40];
			sprintf(string, "Du bist eine");
			send_message_to_site(string);
			break;
		}
		case WEBSOCKET_STATUS:
			printf("listening... ");
			mg_mgr_poll(&mgr, 1000);
			printf("done\n");
			break;
		}
	}

	mg_mgr_free(&mgr);
	return 0;
}
